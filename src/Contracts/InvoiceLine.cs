// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: InvoiceLine.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Invoicing {

  /// <summary>Holder for reflection information generated from InvoiceLine.proto</summary>
  public static partial class InvoiceLineReflection {

    #region Descriptor
    /// <summary>File descriptor for InvoiceLine.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InvoiceLineReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFJbnZvaWNlTGluZS5wcm90bxIJSW52b2ljaW5nIocBCgtJbnZvaWNlTGlu",
            "ZRITCgtsaW5lX251bWJlchgBIAEoDRISCgpwcm9kdWN0X2lkGAIgASgFEhQK",
            "DHByb2R1Y3RfbmFtZRgDIAEoCRIQCghxdWFudGl0eRgEIAEoDRISCgp1bml0",
            "X3ByaWNlGAUgASgCEhMKC2xpbmVfYW1vdW50GAYgASgCQgyqAglJbnZvaWNp",
            "bmdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Invoicing.InvoiceLine), global::Invoicing.InvoiceLine.Parser, new[]{ "LineNumber", "ProductId", "ProductName", "Quantity", "UnitPrice", "LineAmount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InvoiceLine : pb::IMessage<InvoiceLine> {
    private static readonly pb::MessageParser<InvoiceLine> _parser = new pb::MessageParser<InvoiceLine>(() => new InvoiceLine());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvoiceLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Invoicing.InvoiceLineReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceLine(InvoiceLine other) : this() {
      lineNumber_ = other.lineNumber_;
      productId_ = other.productId_;
      productName_ = other.productName_;
      quantity_ = other.quantity_;
      unitPrice_ = other.unitPrice_;
      lineAmount_ = other.lineAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceLine Clone() {
      return new InvoiceLine(this);
    }

    /// <summary>Field number for the "line_number" field.</summary>
    public const int LineNumberFieldNumber = 1;
    private uint lineNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LineNumber {
      get { return lineNumber_; }
      set {
        lineNumber_ = value;
      }
    }

    /// <summary>Field number for the "product_id" field.</summary>
    public const int ProductIdFieldNumber = 2;
    private int productId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProductId {
      get { return productId_; }
      set {
        productId_ = value;
      }
    }

    /// <summary>Field number for the "product_name" field.</summary>
    public const int ProductNameFieldNumber = 3;
    private string productName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProductName {
      get { return productName_; }
      set {
        productName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 4;
    private uint quantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    /// <summary>Field number for the "unit_price" field.</summary>
    public const int UnitPriceFieldNumber = 5;
    private float unitPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UnitPrice {
      get { return unitPrice_; }
      set {
        unitPrice_ = value;
      }
    }

    /// <summary>Field number for the "line_amount" field.</summary>
    public const int LineAmountFieldNumber = 6;
    private float lineAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LineAmount {
      get { return lineAmount_; }
      set {
        lineAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvoiceLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvoiceLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LineNumber != other.LineNumber) return false;
      if (ProductId != other.ProductId) return false;
      if (ProductName != other.ProductName) return false;
      if (Quantity != other.Quantity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UnitPrice, other.UnitPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LineAmount, other.LineAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LineNumber != 0) hash ^= LineNumber.GetHashCode();
      if (ProductId != 0) hash ^= ProductId.GetHashCode();
      if (ProductName.Length != 0) hash ^= ProductName.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      if (UnitPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UnitPrice);
      if (LineAmount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LineAmount);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LineNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LineNumber);
      }
      if (ProductId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ProductId);
      }
      if (ProductName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProductName);
      }
      if (Quantity != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Quantity);
      }
      if (UnitPrice != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(UnitPrice);
      }
      if (LineAmount != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(LineAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LineNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LineNumber);
      }
      if (ProductId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProductId);
      }
      if (ProductName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductName);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quantity);
      }
      if (UnitPrice != 0F) {
        size += 1 + 4;
      }
      if (LineAmount != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvoiceLine other) {
      if (other == null) {
        return;
      }
      if (other.LineNumber != 0) {
        LineNumber = other.LineNumber;
      }
      if (other.ProductId != 0) {
        ProductId = other.ProductId;
      }
      if (other.ProductName.Length != 0) {
        ProductName = other.ProductName;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
      if (other.UnitPrice != 0F) {
        UnitPrice = other.UnitPrice;
      }
      if (other.LineAmount != 0F) {
        LineAmount = other.LineAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LineNumber = input.ReadUInt32();
            break;
          }
          case 16: {
            ProductId = input.ReadInt32();
            break;
          }
          case 26: {
            ProductName = input.ReadString();
            break;
          }
          case 32: {
            Quantity = input.ReadUInt32();
            break;
          }
          case 45: {
            UnitPrice = input.ReadFloat();
            break;
          }
          case 53: {
            LineAmount = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
